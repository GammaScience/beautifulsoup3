Beautiful Soup 3
****************

Development on the 3.x release of Beautiful Soup ended in 2011. With
the sunsetting of Python 2 in 2020, the 3.x release of Beautiful Soup
will be discontinued so that the 'beautifulsoup' package name on pip
can be used by a more recent release that supports Python 3.

January 1, 2021 is the cutoff date. At some point after that, the
'beautifulsoup' pip package will be updated to a recent version of
Beautiful Soup.

If you're relying on version 3 of Beautiful Soup, you should drop
everything and port your code to Python 3. A relatively small part of
this work will be changing your Beautiful Soup code to Beautiful Soup
4.

http://www.crummy.com/software/BeautifulSoup/bs4/

3.2.2 (20191005)
================

Added helpful syntax errors when someone tries to run Beautiful Soup 3
code under Python 3. Added a detailed deprecation warning with
instructions for everyone else. [bug=1643256]

3.2.1 (20110216)
================

Substitute XML entities for angle brackets and bare ampersands within
strings, not just within attribute values. This prevents a possible
cross-site scripting attack when Beautiful Soup is used to sanitize
HTML.

(https://bugs.launchpad.net/beautifulsoup/+bug/868921)

3.2.0
=====

Gave the stable series a higher version number than the unstable
series, to make it very clear which series most people should be using.

When creating a Tag object, you can specify its attributes as a dict
rather than as a list of 2-tuples.

3.0.8.1
=======

Bug fixes
---------

Corrected Beautiful Soup's behavior when a findAll() call contained a
value for the "text" argument as well as values for arguments that
imply it should search for tags. (The "text" argument takes priority
and text is returned, not tags.)

Corrected a typo that made I_CANT_BELIEVE_THEYRE_NESTABLE_BLOCK_TAGS
stop being a tuple.

3.0.8
=====

Inauguration of the 3.0.x series as the stable series.

New features
------------

Tag.replaceWithChildren()
  Replace a tag with its children.

Tag.string assignment
 `tag.string = string` replaces the contents of a tag with `string`.

Tag.text property (NOT A FUNCTION!)
 tag.text gathers together and joins all text children. Much faster than
 "".join(tag.findAll(text=True))

Tag.getText(seperator=u"")
 Same as Tag.text, but a function that allows a custom seperator between joined
 text elements.

Tag.index(element) -> int
 Returns the index of `element` within the tag. Matches the actual
 element instead of using __eq__.

Tag.clear()
 Remove all child elements.

Improvements
------------

Previously, searching by CSS class only matched tags that had the
requested CSS class and no other classes. Now, searching by CSS class
matches every tag that uses that class.

Performance
-----------

Beware! Although searching the tree is much faster in 3.0.8 than in
previous versions, you probably won't notice the difference in real
situations, because the time spent searching the tree is typically
dwarfed by the time spent parsing the file in the first place.

Tag.decompose() is several times faster.
A very basic findAll(...) is several times faster.
findAll(True) is special cased
Tag.recursiveChildGenerator is much faster
